spring:
  profiles:
    active: debug
  application:
    name: eureka-server

server:
  port: 8081
#Standalone Mode - The combination of the two caches (client and server) and the hearbeats make a standalone Eurkea server fairly resilent to failure,
# as long as there is some sort of monitor or elastic runtime keeping it alive.
#In standalone mode, you might prefer to switch off the client side behavior so that it does not keep trying and failing to reach its peers...
eureka:
  instance:
    hostname: localhost
    health-check-url: /health

  client:
    register-with-eureka: false #client can register to eureka server
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
    #region: ap-northeast-2
    #availability-zones:
    #  ap-northeaset-2: ap-northeast-2c

#The Eureka Server does not have a back end store, but the service instancse in the registry all have to send hearbeats
#to keep their registrations up to date( so this can bo done in memory)
#Clients also have an in-memory cache of Eureka registrations (so they do not have go to the registry for every request
# to a service)

#By default, every Eureka server is also a Eureka client and requires service URL to locate a peer

---
spring:
  profiles:
  application:
    name: eureka-server

server:
  port: 8081
#Standalone Mode - The combination of the two caches (client and server) and the hearbeats make a standalone Eurkea server fairly resilent to failure,
# as long as there is some sort of monitor or elastic runtime keeping it alive.
#In standalone mode, you might prefer to switch off the client side behavior so that it does not keep trying and failing to reach its peers...
eureka:
  instance:
    hostname: localhost
    health-check-url: /health
  client:
    register-with-eureka: false #client can not register to eureka server
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
    region: ap-northeast-2
    availability-zones:
      ap-northeast-2: ap-northeast-2a, ap-northeast-2c
    prefer-same-zone-eureka: true


## -----------------------
## AWS deployment examples
##------------------------

# for AWS deployments, availability zones can be specified to take advantage of eureka client zone affinity by
# specifying the following configurations.
# for example, if the deployment is in us-east-1 and the available zones are us-east-1a, us-east-1b and us-east-1c,

# define the region
#eureka.region=us-east-1

# notice that the region is specified as part of the config name
#eureka.us-east-1.availabilityZones=us-east-1a,us-east-1b,us-east-1c

# "eurekaServerPort" is whatever port your eureka servers are configured with
#eureka.serviceUrl.us-east-1a=http://eurekaServerHostName:eurekaServerPort/eureka/v2
#eureka.serviceUrl.us-east-1b=http://eurekaServerHostName:eurekaServerPort/eureka/v2
#eureka.serviceUrl.us-east-1c=http://eurekaServerHostName:eurekaServerPort/eureka/v2

# If shouldUseDns is set to true, the below is an example of how to configure eureka client to route to eureka servers,
# assuming for example your DNS records are setup thus:
# txt record: txt.mycompany.eureka.mydomain.com => "server1address" "server2address" "server3address"
#eureka.shouldUseDns=true
#eureka.eurekaServer.domainName=mydomain.com