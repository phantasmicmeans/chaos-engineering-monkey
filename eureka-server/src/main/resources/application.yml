spring:
  profiles:
    active: debug
  application:
    name: eureka-server

server:
  port: 8081
#Standalone Mode - The combination of the two caches (client and server) and the hearbeats make a standalone Eurkea server fairly resilent to failure,
# as long as there is some sort of monitor or elastic runtime keeping it alive.
#In standalone mode, you might prefer to switch off the client side behavior so that it does not keep trying and failing to reach its peers...
eureka:
  instance:
    hostname: localhost
    health-check-url: /health
  client:
    register-with-eureka: false #client can not register to eureka server
    fetch-registry: false #client can not fetch any resource from eureka server
    service-url:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
    region: ap-northeast-2
    availability-zones:
      ap-northeaset-2: ap-northeast-2c

#The Eureka Server does not have a back end store, but the service instancse in the registry all have to send hearbeats
#to keep their registrations up to date( so this can bo done in memory)
#Clients also have an in-memory cache of Eureka registrations (so they do not have go to the registry for every request
# to a service)

#By default, every Eureka server is also a Eureka client and requires service URL to locate a peer

